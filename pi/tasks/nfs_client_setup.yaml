- name: Ensure target NFS rootfs directory exists for {{ client_hostname }}
  ansible.builtin.file:
    path: "{{ client_nfs_rootfs_path }}"
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Synchronize rootfs content to NFS share for {{ client_hostname }}
  ansible.builtin.synchronize:
    src: "{{ temp_dir }}/rootfs_mnt/"
    dest: "{{ client_nfs_rootfs_path }}"
    recursive: yes
    delete: yes
    perms: yes
    owner: yes
    group: yes
  delegate_to: "{{ inventory_hostname }}"
  become: yes
  when: loop_device is defined and loop_device != ''

- name: Configure /etc/fstab for NFS root in {{ client_hostname }} rootfs
  ansible.builtin.blockinfile:
    path: "{{ client_nfs_rootfs_path }}/etc/fstab"
    block: |
      # /etc/fstab for NFS root (managed by Ansible for {{ client_hostname }})
      {{ nfs_server_ip }}:{{ client_nfs_rootfs_path }}  /  nfs  defaults,vers=4.1,proto=tcp,noatime,rw 0 0
      tmpfs  /tmp  tmpfs  defaults,nosuid,nodev  0  0
      # Local /boot partition will be mounted from SD card or USB drive.
      # Example: PARTUUID=XXXXXXXX-01  /boot  vfat  defaults,flush  0  0
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR NFS ROOT FSTAB {{ client_hostname }}"
    insertafter: EOF

- name: Configure /etc/hostname for {{ client_hostname }} in rootfs
  ansible.builtin.lineinfile:
    path: "{{ client_nfs_rootfs_path }}/etc/hostname"
    line: "{{ client_short_name }}"

- name: Configure /etc/hosts for {{ client_hostname }} in rootfs
  ansible.builtin.blockinfile:
    path: "{{ client_nfs_rootfs_path }}/etc/hosts"
    block: |
      127.0.0.1       localhost
      127.0.1.1       {{ client_short_name }}
      ::1     localhost ip6-localhost ip6-loopback
      ff02::1 ip6-allnodes
      ff02::2 ip6-allrouters
      {{ nfs_server_ip }}     {{ hostvars[nfs_server_ip].ansible_host | default(inventory_hostname) }} {{ client_hostname }}
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR NFS ROOT HOSTS {{ client_hostname }}"
    insertafter: EOF

- name: Remove SSH host keys from rootfs for {{ client_hostname }}
  ansible.builtin.file:
    path: "{{ client_nfs_rootfs_path }}/etc/ssh/ssh_host_{{ item }}_key"
    state: absent
  loop:
  - rsa_key
  - dsa_key
  - ecdsa_key
  - ed25519_key
  ignore_errors: yes

- name: Set Raspberry Pi username and password in {{ client_hostname }} rootfs
  ansible.builtin.shell: |
    chroot {{ client_nfs_rootfs_path }} echo "pi:raspberry" | chpasswd || true
  args:
    executable: /bin/bash
  changed_when: true

- name: Copy all boot files from mounted image to NFS boot directory for {{ client_hostname }}
  ansible.builtin.copy:
    src: "{{ temp_dir }}/boot_mnt/"
    dest: "{{ client_nfs_rootfs_path }}/boot/usb"
    remote_src: yes
    mode: preserve
    owner: root
    group: root

- name: Generate config.txt for NFS boot for {{ client_hostname }}
  ansible.builtin.template:
    src: config.txt.j2
    dest: "{{ client_nfs_rootfs_path }}/boot/usb/config.txt"
    mode: '0644'
    owner: root
    group: root

- name: Generate cmdline.txt for NFS boot for {{ client_hostname }}
  ansible.builtin.template:
    src: cmdline.txt.j2
    dest: "{{ client_nfs_rootfs_path }}/boot/usb/cmdline.txt"
    mode: '0644'
    owner: root
    group: root
